{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","_ref","movie","_jsxs","className","children","_jsx","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","addMovie","_useState","useState","_useState2","_slicedToArray","setMovie","_useState3","_useState4","isLoading","setIsLoading","_useState5","_useState6","query","setQuery","_useState7","_useState8","hasError","setHasError","handleSubmit","event","preventDefault","fetch","concat","then","res","json","catch","Response","Error","getMovie","foundMovie","movieData","Poster","Title","Plot","imdbID","finally","_Fragment","onSubmit","htmlFor","type","id","placeholder","classNames","value","onChange","target","disabled","onClick","App","setMovies","moviePrewiew","some","currentMovies","_toConsumableArray","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3393e355.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { getMovie } from '../../api';\nimport { MovieData } from '../../types/MovieData';\nimport { Movie } from '../../types/Movie';\nimport './FindMovie.scss';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  addMovie: (movie: Movie) => void;\n};\n\nexport const FindMovie: React.FC<Props> = ({ addMovie }) => {\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [query, setQuery] = useState('');\n  const [hasError, setHasError] = useState(false);\n\n  const handleAdd = () => {\n    addMovie(movie as Movie);\n    setQuery('');\n    setHasError(false);\n    setMovie(null);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsLoading(true);\n    getMovie(query)\n      .then((foundMovie) => {\n        if ('Error' in foundMovie) {\n          setHasError(true);\n\n          return;\n        }\n\n        const movieData = foundMovie as MovieData;\n\n        const imgUrl = movieData.Poster === 'N/A'\n          ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n          : movieData.Poster;\n\n        setMovie({\n          title: movieData.Title,\n          description: movieData.Plot,\n          imgUrl,\n          imdbUrl: `https://www.imdb.com/title/${movieData.imdbID}`,\n          imdbId: movieData.imdbID,\n        });\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={(event) => handleSubmit(event)}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', { 'is-danger': hasError })}\n              value={query}\n              onChange={(event) => setQuery(event.target.value)}\n            />\n          </div>\n          {hasError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              disabled={!query}\n              className={classNames('button', 'is-light', {\n                'is-loading': isLoading,\n              })}\n            >\n              Find a movie\n            </button>\n          </div>\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleAdd}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      <div className=\"container\" data-cy=\"previewContainer\">\n        <h2 className=\"title\">Preview</h2>\n        {movie && <MovieCard movie={movie} />}\n      </div>\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=80e3c575';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const addMovie = (moviePrewiew: Movie) => {\n    if (!movies.some((movie) => movie.imdbId === moviePrewiew.imdbId)) {\n      setMovies((currentMovies) => [...currentMovies, moviePrewiew]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie addMovie={(movie: Movie) => addMovie(movie)} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}